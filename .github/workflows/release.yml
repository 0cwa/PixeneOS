name: Patch and Release OTA

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours (UTC)
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      device-id:
        description: Device ID
        required: true
      ota-version:
        description: OTA version. By default, runs against latest version
        required: false
      force-ota-server-upload:
        description: Force OTA server upload
        required: false
        type: boolean
      root:
        description: Add root to the build
        required: false
        type: boolean
      magisk-preinit-device:
        description: Magisk preinit device. For example, "sda8"
        required: false

env:
  CARGO_INCREMENTAL: 1
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DEVICE_NAME: "bluejay"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Allow for switching to github-pages branch
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
                
      - name: Build and Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2.7.0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12-dev'

      - name: Setup Environment variables
        run: |
          echo "KEYS_AVB_BASE64=${{ secrets.AVB_KEY }}" >> $GITHUB_ENV
          echo "KEYS_CERT_OTA_BASE64=${{ secrets.CERT_OTA }}" >> $GITHUB_ENV
          echo "KEYS_OTA_BASE64=${{ secrets.OTA_KEY }}" >> $GITHUB_ENV

      - name: Patch OTA
        shell: bash
        env:
          ADDITIONALS_ROOT: ${{ github.event.inputs.root }}
          CLEANUP: true
          GRAPHENEOS_VERSION: ${{ github.event.inputs.ota-version }}
          FORCE_UPDATE: ${{ github.event.inputs.force-ota-server-upload }}
          MAGISK_PREINTI: ${{ github.event.inputs.magisk-preinit-device }}
          PASSPHRASE_AVB: ${{ secrets.AVB_PASSPHRASE }}
          PASSPHRASE_OTA: ${{ secrets.OTA_PASSPHRASE }}
        run: |
          echo "DEVICE_NAME=${{ github.event.inputs.device-id || env.DEVICE_NAME }}" >> $GITHUB_ENV
          echo "Running release script"
          src/main.sh
