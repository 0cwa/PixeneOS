name: Patch and Release OTA

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours (UTC)
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      device-id:
        description: Device ID
        required: true
      ota-version:
        description: OTA version. By default, runs against latest version
        required: false
      force-update:
        description: Forcefully upload OTA to the server
        required: false
        type: boolean
      root:
        description: Add root to the build
        required: false
        type: boolean
      magisk-preinit-device:
        description: Magisk preinit device. For example, "sda8"
        required: false

env:
  CARGO_INCREMENTAL: 1
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DEVICE_NAME: "bluejay"
      INTERACTIVE_MODE: "false"

    steps:
      - name: Check if `root` is true and `magisk-preinit-device` is set
        run: |
          if [ "${{ github.event.inputs.root }}" == "true" ] && [ -z "${{ github.event.inputs.magisk-preinit-device }}" ]; then
            echo "Error: magisk-preinit-device is required when root is true."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Allow for switching to github-pages branch
          fetch-depth: 0

      - name: Check if a build exist already
        shell: bash
        run: |
          echo "HI, TBU"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
                
      - name: Build and Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2.7.0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12-dev'

      - name: Setup Environment variables
        run: |
          echo "KEYS_AVB_BASE64=${{ secrets.AVB_KEY }}" >> $GITHUB_ENV
          echo "KEYS_CERT_OTA_BASE64=${{ secrets.CERT_OTA }}" >> $GITHUB_ENV
          echo "KEYS_OTA_BASE64=${{ secrets.OTA_KEY }}" >> $GITHUB_ENV

      - name: Patch OTA
        shell: bash
        env:
          ADDITIONALS_ROOT: ${{ github.event.inputs.root }}
          CLEANUP: true
          FORCE_UPDATE: ${{ github.event.inputs.force-update }}
          GRAPHENEOS_VERSION: ${{ github.event.inputs.ota-version }}
          MAGISK_PREINIT: ${{ github.event.inputs.magisk-preinit-device }}
          PASSPHRASE_AVB: ${{ secrets.PASSPHRASE_AVB }}
          PASSPHRASE_OTA: ${{ secrets.PASSPHRASE_OTA }}
        run: |
          echo "DEVICE_NAME=${{ github.event.inputs.device-id || env.DEVICE_NAME }}" >> $GITHUB_ENV
          echo "Running release script"
          src/main.sh

      - name: Access envs
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | xargs)
          fi
          echo "GRAPHENEOS_OTA_TARGET=${GRAPHENEOS_OTA_TARGET}" >> $GITHUB_ENV
          echo "GRAPHENEOS_VERSION=${GRAPHENEOS_VERSION}" >> $GITHUB_ENV
          echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
          
      - name: Make Release
        uses: "dciborow/action-github-releases@v1.0.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.GRAPHENEOS_VERSION }}"
          prerelease: false
          title: "GrapheneOS v${{ env.GRAPHENEOS_VERSION }}\nSee [Changelog](https://grapheneos.org/releases#${{ env.GRAPHENEOS_VERSION }})."
          files: |
            "${{ env.WORKDIR }}/${{ env.GRAPHENEOS_OTA_TARGET }}.patched*.zip"
            "${{ env.WORKDIR }}/${{ env.GRAPHENEOS_OTA_TARGET }}.patched*.zip.csig"
            
      - name: Publish OTA to server
        shell: bash
        run: |
          local current_commit=$(git rev-parse --short HEAD)
          
          local flavor=("magisk" "rootless")
          local target_file
          mkdir -p "${flavor}"
          
          git checkout gh-pages
          echo "Updating Configs for the new release"

          if [[ ${{ env.ADDITIONALS_ROOT }} == true ]]; then
            target_file="${flavor[magisk]}/${{ env.DEVICE_NAME }}.json"
            cp "${{ env.WORKDIR }}/${{ env.DEVICE_NAME }}.json" "${target_file}"
          else
            target_file="${flavor[rootless]}/${{ env.DEVICE_NAME }}.json"
            cp "${{ env.WORKDIR }}/${{ env.DEVICE_NAME }}.json"  "${target_file}"
          fi
          
          # Stage, commit, and push changes
          git add "${target_file}"
          git commit -m "release("${current_commit}"): bump GrapheneOS version to ${{ env.GRAPHENEOS_VERSION }}"
          if ! git diff-index --quiet HEAD; then
            git push origin gh-pages
          fi
          git checkout main