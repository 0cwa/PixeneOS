name: Patch and Release OTA

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours (UTC)
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      device-id:
        description: Device ID
        required: true
      force-update:
        description: Forcefully upload OTA to the server
        required: false
        type: boolean
      root:
        description: Add root to the build
        required: false
        type: boolean
        default: false
      magisk-preinit-device:
        description: Magisk preinit device. For example, "sda8", "sda15" etc.,
        required: false
      update-channel:
        description: GrapheneOS update channel. Supports `alpha`, `beta` and `stable`. Defaults to `stable`
        required: false

env:
  CARGO_INCREMENTAL: 1
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all

    env:
      DEVICE_NAME: ${{ github.event.inputs.device-id }}
      FORCE_UPDATE: ${{ github.event.inputs.force-update || false }}
      INTERACTIVE_MODE: false
      UPDATE_CHANNEL: ${{ github.event.inputs.update-channel }}

    steps:
      - name: Check if `root` is true and `magisk-preinit-device` is set
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # Convert inputs to proper boolean values
          root=${{ github.event.inputs.root }}
          magisk_preinit_device=${{ github.event.inputs.magisk-preinit-device }}
          
          # Ensure that the boolean comparison is correctly handled
          if [ "$root" == "true" ] && [ -z "$magisk_preinit_device" ]; then
            echo "::error:: magisk-preinit-device is required when root is true."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Allow for switching to github-pages branch
          fetch-depth: 0
      
      - name: Check if a build exists already and verify assets
        shell: bash
        run: |
          url="https://releases.grapheneos.org/${{ env.DEVICE_NAME }}-${{ github.event.inputs.update-channel || 'alpha' }}"
          latest_grapheneos_version=$(curl -sL ${url} | sed 's/ .*//')
          echo "REMOTE_GRAPHENEOS_VERSION=${latest_grapheneos_version}" >> $GITHUB_ENV
      
          # Determine if the build is based on magisk or rootless
          build_flavor=$([[ ${{ github.event.inputs.root == 'true' }} == 'true' ]] && echo 'magisk' || echo 'rootless')
      
          # Check if the tag exists
          if git show-ref --tags ${latest_grapheneos_version} --quiet; then
            echo "Tag with GrapheneOS version ${latest_grapheneos_version} already exists. Looking for assets..."
            # Fetch the release information for the tag
            repo_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${latest_grapheneos_version}"
            release_info=$(curl -sL "$repo_url")
            
            # Define required assets
            required_assets=(
              "${{ env.DEVICE_NAME }}-${latest_grapheneos_version}-magisk-*.zip"
              "${{ env.DEVICE_NAME }}-${latest_grapheneos_version}-magisk-*.zip.csig"
              "${{ env.DEVICE_NAME }}-${latest_grapheneos_version}-rootless-*.zip"
              "${{ env.DEVICE_NAME }}-${latest_grapheneos_version}-rootless-*.zip.csig"
            )
      
            existing_assets=$(echo "$release_info" | jq -r '.assets[].name')
            missing_assets=()

            for required_asset in "${required_assets[@]}"; do
              # Convert wildcard pattern to regex
              regex="${required_asset//\*/.*}"
            
              for asset in "${existing_assets[@]}"; do
                if ! [[ $asset =~ $regex ]]; then
                  missing_assets+=("$required_asset")
                  break
                fi
              done
            done
            
            if [ ${#missing_assets[@]} -eq 0 ]; then
              echo "All required assets are present. Exiting."
              exit 0
            else
              echo -e "Missing assets:"
              for missing_asset in "${missing_assets[@]}"; do
                echo -e "  - $missing_asset"
              done

              # Grep always throws an error stating it cannot find the file or directory
              valid_build=""
              for missing_asset in "${missing_assets[@]}"; do
                if [[ $missing_asset == *"$build_flavor"* ]]; then
                  valid_build="$build_flavor"
                  break
                fi
              done
              
              # Check if valid_build is either "magisk" or "rootless"
              if [[ "$valid_build" == "magisk" ]] || [[ "$valid_build" == "rootless" ]]; then
                echo -e "Proceeding with build to create missing assets..."
              else
                echo -e "::error::Asset with \`$build_flavor\` flavor already exists!"
                exit 1
              fi
            fi
          else
            echo "Tag with GrapheneOS version ${latest_grapheneos_version} does not exist. Creating one..."
          fi

      - name: Setup Git
        run: git config --global user.email ${{ secrets.EMAIL }} && git config --global user.name PiX

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
                
      - name: Build and Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2.7.0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12-dev'

      - name: Setup Environment variables
        run: |
          echo "KEYS_AVB_BASE64=${{ secrets.AVB_KEY }}" >> $GITHUB_ENV
          echo "KEYS_CERT_OTA_BASE64=${{ secrets.CERT_OTA }}" >> $GITHUB_ENV
          echo "KEYS_OTA_BASE64=${{ secrets.OTA_KEY }}" >> $GITHUB_ENV

      - name: Patch OTA
        shell: bash
        env:
          ADDITIONALS_ROOT: ${{ github.event.inputs.root }}
          CLEANUP: true
          FORCE_UPDATE: ${{ github.event.inputs.force-update }}
          GRAPHENEOS_VERSION: ${{ github.event.inputs.ota-version }}
          MAGISK_PREINIT: ${{ github.event.inputs.magisk-preinit-device }}
          PASSPHRASE_AVB: ${{ secrets.PASSPHRASE_AVB }}
          PASSPHRASE_OTA: ${{ secrets.PASSPHRASE_OTA }}
        run: |
          echo "DEVICE_NAME=${{ github.event.inputs.device-id || env.DEVICE_NAME }}" >> $GITHUB_ENV
          echo "Running release script"
          src/main.sh

      - name: Access envs
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | xargs)
          fi
          echo "GRAPHENEOS_OTA_TARGET=${GRAPHENEOS_OTA_TARGET}" >> $GITHUB_ENV
          echo "GRAPHENEOS_VERSION=${GRAPHENEOS_VERSION}" >> $GITHUB_ENV
          echo "OUTPUTS_PATCHED_OTA=${OUTPUTS_PATCHED_OTA}" >> $GITHUB_ENV
          echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV

      - name: Generate Changelog
        run: echo -e "See [Changelog](https://grapheneos.org/releases#${{ env.GRAPHENEOS_VERSION }})." > ${{ github.workspace }}-CHANGELOG.txt
        
      - name: Make Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          files: |
            ${{ env.OUTPUTS_PATCHED_OTA }}
            ${{ env.OUTPUTS_PATCHED_OTA }}.csig
          name: "${{ env.GRAPHENEOS_VERSION }}"
          tag_name: "${{ env.GRAPHENEOS_VERSION }}"
            
      - name: Publish OTA to server
        shell: bash
        run: |
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          FLAVOR=("magisk" "rootless")
          root=${{ github.event.inputs.root }}
          
          mkdir -p "${FLAVOR}"
          
          git checkout gh-pages
          echo "Updating Configs for the new release..."
          
          if [ "${root}" = "true" ] || grep -q magisk "${DEVICE_NAME}.json"; then
            TARGET_FILE="${FLAVOR[0]}/${DEVICE_NAME}.json"
          else
            TARGET_FILE="${FLAVOR[1]}/${DEVICE_NAME}.json"
          fi
          
          echo "Updating Configs for the new release..."

          # Check if the target file exists, if not create an empty one
          if [ ! -f "${TARGET_FILE}" ]; then
            echo "touching ${TARGET_FILE}..."
            touch "${TARGET_FILE}"
          fi

          if ! grep -q "${{ env.GRAPHENEOS_VERSION }}" "${TARGET_FILE}" || [[ "${{ github.event.inputs.force-update || false }}" == 'true' ]]; then
            echo "Copying ${{ env.DEVICE_NAME }}.json to ${TARGET_FILE}..."
            cp "${{ env.DEVICE_NAME }}.json" "${TARGET_FILE}"
            git add "${TARGET_FILE}"
          else
            echo -e "Deployed version (${{ env.GRAPHENEOS_VERSION }}) is same as current GrapheneOS release (${{ env.REMOTE_GRAPHENEOS_VERSION }}) and \`FORCE_UPDATE\` is \`false\`.\nUpdate skipped."
          fi

          if ! git diff-index --quiet HEAD; then
            git commit -m "release("${CURRENT_COMMIT}"): bump GrapheneOS version to ${{ env.GRAPHENEOS_VERSION }}"
            git push origin gh-pages
          fi
          git checkout main
